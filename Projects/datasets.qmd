---
title: "Datasets and tips"
data: "../data_sources/*"
---

## Datasets

We have nine datasets for you to choose from. **We recommend saving your data inside your project**.

| Dataset | Description |
| --- | --- |
| [World populations](../data_sources/population.csv) | A summary of world populations and corresponding statistics | 
| [Soccer players](../data_sources/Players2024.csv) | A summary of 2024 soccer players |
| [Coffee survey](../data_sources/coffee_survey.csv) | A survey of coffee preferences | 
| [Gapminder](../data_sources/gapminder.csv) | GDP and life expectancy data by country |
| [Melbourne housing data](../data_sources/melb_data.csv) | A collection of houses for sale in Melbourne | 
| [Goodreads books](../data_sources/books.csv) | Data from Goodreads books |
| [Queensland hospitals](../data_sources/hospital_data.csv) | Emergency department statistics |
| [Queensland fuel prices](../data_sources/qld_fuel.csv) | Fuel prices by the pump in Queensland | 
| [Aeroplane bird strikes](../data_sources/birds_strikes.csv) | Aeroplane bird strike incidents fron the 90s| 

## Tips

Here's a few general tips. In addition, we strongly recommend using [popular cheatsheets](https://rstudio.github.io/cheatsheets/), which give a quick and easy reference for common packages and functions. 

#### Hotkeys
| Code | Hotkey | Description |
| --- | --- | --- |
|  | <kbd>Ctrl</kbd>+<kbd>Enter</kbd> | Run current line (when in Script) |
| `<-` | <kbd>Alt</kbd>+<kbd>Enter</kbd> | Assignment |
| `%>%` | <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>M</kbd> | Pipe |
|  | <kbd>Esc</kbd> | Cancel current operation (when in Console) |
|  | <kbd>F1</kbd> | Help documentation for selected function |

#### Importing data
In case you've forgotten, use the `read.csv()` function to import data:

```r
dataset <- read.csv("data/dataset.csv")
```

#### Initial exploration
You'll want to explore the data to start with - below are a few functions to get started.

| Function | Example | Description |
| --- | --- | --- |
| `names()` | `names(dataset)` | Returns the variable names | 
| `str()` | `str(dataset)` | Returns the structure of the dataset (variable names, types and first entries) | 
| `$` | `dataset$variable` | Returns a specific variable |
| `unique()` | `unique(dataset$variable)` | Returns the unique values of a variable |
| `summary()` | `summary(dataset$variable)` | Returns a statistical summary of a variable |

#### Time series data
If you've picked a dataset with time-series data (e.g. a "date" variable), you should transform that column so that it visualises better:

```r
dataset <- dataset %>%
  mutate(time_based_column = as.Date(time_based_column))
```

#### Ordered data
Some datasets have ordered data, but by default R doesn't know this. To communicate the proper order to R, we use `factor()`, and send in an ordered list of the levels joined with `c()`:

```r
dataset <- dataset %>%
  mutate(ordered_column = factor(ordered_column, levels = c("first_val", "second_val", ... )))
```

> This is particularly useful for the **Coffee survey** dataset.

#### Renaming columns
Some datasets have cumbersome names for their variables. We can change variable names with

```r
df <- df %>% 
  rename(new_name = old_name)
```

> This is particularly useful for the **World population** dataset.